
pool: hosted-linux

pr: none



trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/Auth.Models
      - src/Auth.WebAPI
      - pipelines/WebApi.yaml

variables:
  projectPath: src/Auth.WebAPI
  projectName: Auth.WebAPI
  deploymentDestDirectory: /var/www/auth

  service.name: kestrel-authAPI
  service.url: http://localhost:5060
  service.description: Auth API

stages:
  - stage: 
    displayName: Build
    jobs:

    - job: Compile
      steps:

      - script: |
          dotnet publish $(projectPath) -c release -o published
          mkdir -p compressed
          tar -czf compressed/$(projectName).tar.gz -C published .
        displayName: Publishing API

      - publish: compressed
        displayName: Publish for release
        artifact: published

  - stage: CD
    displayName: Deploy to the VM

    jobs:
      - deployment: Deployment
        displayName: Deploy to Development VM
        environment:
          name: Development
          resourceType: VirtualMachine
          resourceName: Web Server
        strategy:
          runOnce:
            deploy:
              steps:

                - checkout: none

                - download: current
                  displayName: download published artifact
                  artifact: published

                - script: |

                    cat <<EOF  > $(Pipeline.Workspace)/published/linux.service
                    [Unit]
                    Description=$(service.description)

                    [Install]
                    WantedBy=multi-user.target

                    [Service]
                    WorkingDirectory=$(deploymentDestDirectory)
                    ExecStart=/usr/bin/dotnet $(deploymentDestDirectory)/$(projectName).dll --urls $(service.url)
                    Restart=always
                    # Restart service after 10 seconds if the dotnet service crashes:
                    RestartSec=10
                    KillSignal=SIGINT
                    SyslogIdentifier=$(service.name)
                    User=root
                    EOF

                    sudo rm -rf $(deploymentDestDirectory)
                    sudo mkdir -p $(deploymentDestDirectory)
                    sudo tar -xzf $(projectName).tar.gz -C $(deploymentDestDirectory)

                    sudo systemctl enable $(service.name).service 
                    sudo systemctl stop $(service.name).service 
                    sudo systemctl start $(service.name).service

                    rm -rf *

                  displayName: Generate Service File
                  workingDirectory: $(Pipeline.Workspace)/published
                  failOnStderr: true
      
                - task: DeleteFiles@1
                  displayName: Clean up
                              